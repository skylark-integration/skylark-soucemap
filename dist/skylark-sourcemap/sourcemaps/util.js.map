{"version":3,"sources":["util.js"],"names":["define","urlRegexp","dataUrlRegexp","urlParse","aUrl","match","scheme","auth","host","port","path","urlGenerate","aParsedUrl","url","normalize","aPath","part","isAbsPath","isAbsolute","parts","split","up","i","length","splice","join","aRoot","aPathUrl","aRootUrl","joined","charAt","replace","test","supportsNullProto","Object","create","identity","s","isProtoString","charCodeAt","strcmp","aStr1","aStr2","toSetString","aStr","fromSetString","slice","compareByOriginalPositions","mappingA","mappingB","onlyCompareOriginal","cmp","source","originalLine","originalColumn","generatedColumn","generatedLine","name","compareByGeneratedPositionsDeflated","onlyCompareGenerated","compareByGeneratedPositionsInflated","parseSourceMapInput","str","JSON","parse","getArg","aArgs","aName","aDefaultValue","arguments","Error","relative","level","indexOf","index","lastIndexOf","Array","substr","computeSourceURL","sourceRoot","sourceURL","sourceMapURL","parsed","substring"],"mappings":"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","file":"../util.js","sourcesContent":["define([], function () {\n    'use strict';\n \n    function getArg(aArgs, aName, aDefaultValue) {\n        if (aName in aArgs) {\n            return aArgs[aName];\n        } else if (arguments.length === 3) {\n            return aDefaultValue;\n        } else {\n            throw new Error('\"' + aName + '\" is a required argument.');\n        }\n    }\n    var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\n    var dataUrlRegexp = /^data:.+\\,.+$/;\n    function urlParse(aUrl) {\n        var match = aUrl.match(urlRegexp);\n        if (!match) {\n            return null;\n        }\n        return {\n            scheme: match[1],\n            auth: match[2],\n            host: match[3],\n            port: match[4],\n            path: match[5]\n        };\n    }\n    function urlGenerate(aParsedUrl) {\n        var url = '';\n        if (aParsedUrl.scheme) {\n            url += aParsedUrl.scheme + ':';\n        }\n        url += '//';\n        if (aParsedUrl.auth) {\n            url += aParsedUrl.auth + '@';\n        }\n        if (aParsedUrl.host) {\n            url += aParsedUrl.host;\n        }\n        if (aParsedUrl.port) {\n            url += ':' + aParsedUrl.port;\n        }\n        if (aParsedUrl.path) {\n            url += aParsedUrl.path;\n        }\n        return url;\n    }\n    function normalize(aPath) {\n        var path = aPath;\n        var url = urlParse(aPath);\n        if (url) {\n            if (!url.path) {\n                return aPath;\n            }\n            path = url.path;\n        }\n        var isAbsPath = isAbsolute(path);\n        var parts = path.split(/\\/+/);\n        for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n            part = parts[i];\n            if (part === '.') {\n                parts.splice(i, 1);\n            } else if (part === '..') {\n                up++;\n            } else if (up > 0) {\n                if (part === '') {\n                    parts.splice(i + 1, up);\n                    up = 0;\n                } else {\n                    parts.splice(i, 2);\n                    up--;\n                }\n            }\n        }\n        path = parts.join('/');\n        if (path === '') {\n            path = isAbsPath ? '/' : '.';\n        }\n        if (url) {\n            url.path = path;\n            return urlGenerate(url);\n        }\n        return path;\n    }\n    function join(aRoot, aPath) {\n        if (aRoot === '') {\n            aRoot = '.';\n        }\n        if (aPath === '') {\n            aPath = '.';\n        }\n        var aPathUrl = urlParse(aPath);\n        var aRootUrl = urlParse(aRoot);\n        if (aRootUrl) {\n            aRoot = aRootUrl.path || '/';\n        }\n        if (aPathUrl && !aPathUrl.scheme) {\n            if (aRootUrl) {\n                aPathUrl.scheme = aRootUrl.scheme;\n            }\n            return urlGenerate(aPathUrl);\n        }\n        if (aPathUrl || aPath.match(dataUrlRegexp)) {\n            return aPath;\n        }\n        if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n            aRootUrl.host = aPath;\n            return urlGenerate(aRootUrl);\n        }\n        var joined = aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n        if (aRootUrl) {\n            aRootUrl.path = joined;\n            return urlGenerate(aRootUrl);\n        }\n        return joined;\n    }\n    function isAbsolute(aPath) {\n        return aPath.charAt(0) === '/' || urlRegexp.test(aPath);\n    }\n    function relative(aRoot, aPath) {\n        if (aRoot === '') {\n            aRoot = '.';\n        }\n        aRoot = aRoot.replace(/\\/$/, '');\n        var level = 0;\n        while (aPath.indexOf(aRoot + '/') !== 0) {\n            var index = aRoot.lastIndexOf('/');\n            if (index < 0) {\n                return aPath;\n            }\n            aRoot = aRoot.slice(0, index);\n            if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n                return aPath;\n            }\n            ++level;\n        }\n        return Array(level + 1).join('../') + aPath.substr(aRoot.length + 1);\n    }\n    var supportsNullProto = function () {\n        var obj = Object.create(null);\n        return !('__proto__' in obj);\n    }();\n    function identity(s) {\n        return s;\n    }\n    function toSetString(aStr) {\n        if (isProtoString(aStr)) {\n            return '$' + aStr;\n        }\n        return aStr;\n    }\n    function fromSetString(aStr) {\n        if (isProtoString(aStr)) {\n            return aStr.slice(1);\n        }\n        return aStr;\n    }\n    function isProtoString(s) {\n        if (!s) {\n            return false;\n        }\n        var length = s.length;\n        if (length < 9) {\n            return false;\n        }\n        if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {\n            return false;\n        }\n        for (var i = length - 10; i >= 0; i--) {\n            if (s.charCodeAt(i) !== 36) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n        var cmp = strcmp(mappingA.source, mappingB.source);\n        if (cmp !== 0) {\n            return cmp;\n        }\n        cmp = mappingA.originalLine - mappingB.originalLine;\n        if (cmp !== 0) {\n            return cmp;\n        }\n        cmp = mappingA.originalColumn - mappingB.originalColumn;\n        if (cmp !== 0 || onlyCompareOriginal) {\n            return cmp;\n        }\n        cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n        if (cmp !== 0) {\n            return cmp;\n        }\n        cmp = mappingA.generatedLine - mappingB.generatedLine;\n        if (cmp !== 0) {\n            return cmp;\n        }\n        return strcmp(mappingA.name, mappingB.name);\n    }\n    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n        var cmp = mappingA.generatedLine - mappingB.generatedLine;\n        if (cmp !== 0) {\n            return cmp;\n        }\n        cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n        if (cmp !== 0 || onlyCompareGenerated) {\n            return cmp;\n        }\n        cmp = strcmp(mappingA.source, mappingB.source);\n        if (cmp !== 0) {\n            return cmp;\n        }\n        cmp = mappingA.originalLine - mappingB.originalLine;\n        if (cmp !== 0) {\n            return cmp;\n        }\n        cmp = mappingA.originalColumn - mappingB.originalColumn;\n        if (cmp !== 0) {\n            return cmp;\n        }\n        return strcmp(mappingA.name, mappingB.name);\n    }\n    function strcmp(aStr1, aStr2) {\n        if (aStr1 === aStr2) {\n            return 0;\n        }\n        if (aStr1 === null) {\n            return 1;\n        }\n        if (aStr2 === null) {\n            return -1;\n        }\n        if (aStr1 > aStr2) {\n            return 1;\n        }\n        return -1;\n    }\n    function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n        var cmp = mappingA.generatedLine - mappingB.generatedLine;\n        if (cmp !== 0) {\n            return cmp;\n        }\n        cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n        if (cmp !== 0) {\n            return cmp;\n        }\n        cmp = strcmp(mappingA.source, mappingB.source);\n        if (cmp !== 0) {\n            return cmp;\n        }\n        cmp = mappingA.originalLine - mappingB.originalLine;\n        if (cmp !== 0) {\n            return cmp;\n        }\n        cmp = mappingA.originalColumn - mappingB.originalColumn;\n        if (cmp !== 0) {\n            return cmp;\n        }\n        return strcmp(mappingA.name, mappingB.name);\n    }\n    function parseSourceMapInput(str) {\n        return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, ''));\n    }\n    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n        sourceURL = sourceURL || '';\n        if (sourceRoot) {\n            if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {\n                sourceRoot += '/';\n            }\n            sourceURL = sourceRoot + sourceURL;\n        }\n        if (sourceMapURL) {\n            var parsed = urlParse(sourceMapURL);\n            if (!parsed) {\n                throw new Error('sourceMapURL could not be parsed');\n            }\n            if (parsed.path) {\n                var index = parsed.path.lastIndexOf('/');\n                if (index >= 0) {\n                    parsed.path = parsed.path.substring(0, index + 1);\n                }\n            }\n            sourceURL = join(urlGenerate(parsed), sourceURL);\n        }\n        return normalize(sourceURL);\n    }\n\n    return {\n        toSetString : supportsNullProto ? identity : toSetString,\n        fromSetString : supportsNullProto ? identity : fromSetString,\n        compareByOriginalPositions,\n\n        isAbsolute,\n        compareByGeneratedPositionsDeflated,\n        compareByGeneratedPositionsInflated,\n        parseSourceMapInput,\n        getArg,\n        urlParse,\n        urlGenerate,\n        normalize,\n        join,\n        relative,\n        computeSourceURL\n    };\n});"]}