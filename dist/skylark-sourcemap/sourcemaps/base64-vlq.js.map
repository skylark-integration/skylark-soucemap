{"version":3,"sources":["base64-vlq.js"],"names":["define","base64","encode","aValue","digit","encoded","vlq","toVLQSigned","VLQ_BASE","decode","aStr","aIndex","aOutParam","continuation","shifted","strLen","length","result","shift","Error","charCodeAt","charAt","value","rest"],"mappings":";;;;;;;AAAAA,QAAQ,YAAa,SAAUC,GAC3B,aAiDA,OACIC,OArCS,SAA0BC,GACnC,IACIC,EADAC,EAAU,GAEVC,EAXR,SAAqBH,GACjB,OAAOA,EAAS,EAAqB,IAAfA,GAAU,GAAyB,GAAfA,GAAU,GAU1CI,CAAYJ,GACtB,GACIC,EAfYI,GAeJF,GACRA,KAlBa,GAmBH,IACNF,GAnBG,IAqBPC,GAAWJ,EAAOC,OAAOE,SACpBE,EAAM,GACf,OAAOD,GA0BPI,OAxBS,SAA0BC,EAAMC,EAAQC,GACjD,IAGIC,EAAcT,EAvBCD,EAEfW,EAkBAC,EAASL,EAAKM,OACdC,EAAS,EACTC,EAAQ,EAEZ,EAAG,CACC,GAAIP,GAAUI,EACV,MAAM,IAAII,MAAM,8CAGpB,IAAe,KADff,EAAQH,EAAOQ,OAAOC,EAAKU,WAAWT,OAElC,MAAM,IAAIQ,MAAM,yBAA2BT,EAAKW,OAAOV,EAAS,IAEpEE,KAtCO,GAsCWT,GAElBa,IADAb,GAtCYI,KAuCgBU,EAC5BA,GA1Ca,QA2CRL,GACTD,EAAUU,OAnCNR,GAFeX,EAqCac,IAnCR,EADU,IAAP,EAATd,IAEGW,EAAUA,GAmC/BF,EAAUW,KAAOZ","file":"../base64-vlq.js","sourcesContent":["define(['./base64'], function (base64) {\n    'use strict';\n    var VLQ_BASE_SHIFT = 5;\n    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n    var VLQ_BASE_MASK = VLQ_BASE - 1;\n    var VLQ_CONTINUATION_BIT = VLQ_BASE;\n    function toVLQSigned(aValue) {\n        return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n    }\n    function fromVLQSigned(aValue) {\n        var isNegative = (aValue & 1) === 1;\n        var shifted = aValue >> 1;\n        return isNegative ? -shifted : shifted;\n    }\n    var encode = function base64VLQ_encode(aValue) {\n        var encoded = '';\n        var digit;\n        var vlq = toVLQSigned(aValue);\n        do {\n            digit = vlq & VLQ_BASE_MASK;\n            vlq >>>= VLQ_BASE_SHIFT;\n            if (vlq > 0) {\n                digit |= VLQ_CONTINUATION_BIT;\n            }\n            encoded += base64.encode(digit);\n        } while (vlq > 0);\n        return encoded;\n    };\n    var decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n        var strLen = aStr.length;\n        var result = 0;\n        var shift = 0;\n        var continuation, digit;\n        do {\n            if (aIndex >= strLen) {\n                throw new Error('Expected more digits in base 64 VLQ value.');\n            }\n            digit = base64.decode(aStr.charCodeAt(aIndex++));\n            if (digit === -1) {\n                throw new Error('Invalid base64 digit: ' + aStr.charAt(aIndex - 1));\n            }\n            continuation = !!(digit & VLQ_CONTINUATION_BIT);\n            digit &= VLQ_BASE_MASK;\n            result = result + (digit << shift);\n            shift += VLQ_BASE_SHIFT;\n        } while (continuation);\n        aOutParam.value = fromVLQSigned(result);\n        aOutParam.rest = aIndex;\n    };\n\n    return {\n        encode,\n        decode\n    }\n\n});"]}