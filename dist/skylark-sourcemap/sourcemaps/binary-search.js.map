{"version":3,"sources":["binary-search.js"],"names":["define","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","search","aNeedle","aHaystack","aCompare","aBias","length","index","recursiveSearch","aLow","aHigh","mid","Math","floor","cmp"],"mappings":";;;;;;;AAAAA,UAAW,WACP,aAEA,MAAOC,EAAuB,EACxBC,EAAoB,EA4C1B,OACED,qBAAAA,EACAC,kBAAAA,EACAC,OApBD,SAAgBC,EAASC,EAAWC,EAAUC,GAC3C,GAAyB,IAArBF,EAAUG,OACV,OAAQ,EAEZ,IAAIC,EA7BR,SAASC,EAAgBC,EAAMC,EAAOR,EAASC,EAAWC,EAAUC,GAChE,IAAIM,EAAMC,KAAKC,OAAOH,EAAQD,GAAQ,GAAKA,EACvCK,EAAMV,EAASF,EAASC,EAAUQ,IAAM,GAC5C,OAAY,IAARG,EACOH,EACAG,EAAM,EACTJ,EAAQC,EAAM,EACPH,EAAgBG,EAAKD,EAAOR,EAASC,EAAWC,EAAUC,GAEjEA,GAASL,EACFU,EAAQP,EAAUG,OAASI,GAAS,EAEpCC,EAGPA,EAAMF,EAAO,EACND,EAAgBC,EAAME,EAAKT,EAASC,EAAWC,EAAUC,GAEhEA,GAASL,EACFW,EAEAF,EAAO,GAAK,EAAIA,EAQnBD,EAAiB,EAAGL,EAAUG,OAAQJ,EAASC,EAAWC,EAAUC,GAASN,GACzF,GAAIQ,EAAQ,EACR,OAAQ,EAEZ,KAAOA,EAAQ,GAAK,GAC+C,IAA3DH,EAASD,EAAUI,GAAQJ,EAAUI,EAAQ,IAAI,MAGnDA,EAEN,OAAOA","file":"../binary-search.js","sourcesContent":["define([], function () {\n    'use strict';\n\n    const  GREATEST_LOWER_BOUND = 1;\n    const LEAST_UPPER_BOUND = 2;\n\n    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n        var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n        var cmp = aCompare(aNeedle, aHaystack[mid], true);\n        if (cmp === 0) {\n            return mid;\n        } else if (cmp > 0) {\n            if (aHigh - mid > 1) {\n                return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n            }\n            if (aBias == LEAST_UPPER_BOUND) {\n                return aHigh < aHaystack.length ? aHigh : -1;\n            } else {\n                return mid;\n            }\n        } else {\n            if (mid - aLow > 1) {\n                return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n            }\n            if (aBias == LEAST_UPPER_BOUND) {\n                return mid;\n            } else {\n                return aLow < 0 ? -1 : aLow;\n            }\n        }\n    }\n     function search(aNeedle, aHaystack, aCompare, aBias) {\n        if (aHaystack.length === 0) {\n            return -1;\n        }\n        var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || GREATEST_LOWER_BOUND);\n        if (index < 0) {\n            return -1;\n        }\n        while (index - 1 >= 0) {\n            if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n                break;\n            }\n            --index;\n        }\n        return index;\n    };\n\n    return {\n      GREATEST_LOWER_BOUND,\n      LEAST_UPPER_BOUND,\n      search\n    }\n});"]}