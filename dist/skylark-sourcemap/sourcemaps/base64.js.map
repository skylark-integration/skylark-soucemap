{"version":3,"sources":["base64.js"],"names":["define","intToCharMap","split","encode","number","length","TypeError","decode","charCode"],"mappings":";;;;;;;AAAAA,UAAW,WACP,aACA,IAAIC,EAAe,mEAAmEC,MAAM,IAqC5F,OACIC,OArCJ,SAAgBC,GACZ,GAAI,GAAKA,GAAUA,EAASH,EAAaI,OACrC,OAAOJ,EAAaG,GAExB,MAAM,IAAIE,UAAU,6BAA+BF,IAkCnDG,OA/BJ,SAAgBC,GAWZ,OAVW,IAUCA,GAAYA,GATb,GAUAA,EAXA,GAEG,IAWCA,GAAYA,GAVb,IAWHA,EAZG,GAMK,GAJR,IAYCA,GAAYA,GAXb,GAYAA,EAbA,GAKQ,GAHR,IAaPA,EACO,GAbC,IAeRA,EACO,IAEH","file":"../base64.js","sourcesContent":["define([], function () {\n    'use strict';\n    var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n    function encode(number) {\n        if (0 <= number && number < intToCharMap.length) {\n            return intToCharMap[number];\n        }\n        throw new TypeError('Must be between 0 and 63: ' + number);\n    }\n\n    function decode(charCode) {\n        var bigA = 65;\n        var bigZ = 90;\n        var littleA = 97;\n        var littleZ = 122;\n        var zero = 48;\n        var nine = 57;\n        var plus = 43;\n        var slash = 47;\n        var littleOffset = 26;\n        var numberOffset = 52;\n        if (bigA <= charCode && charCode <= bigZ) {\n            return charCode - bigA;\n        }\n        if (littleA <= charCode && charCode <= littleZ) {\n            return charCode - littleA + littleOffset;\n        }\n        if (zero <= charCode && charCode <= nine) {\n            return charCode - zero + numberOffset;\n        }\n        if (charCode == plus) {\n            return 62;\n        }\n        if (charCode == slash) {\n            return 63;\n        }\n        return -1;\n    }\n    \n    return {\n        encode,\n        decode\n    }\n});"]}